s              = code | file
code           = (statement | expr <end>)* return?

file           = import* (method | _assign | class)*
method         = <'@override'>? <(identifier '.')*> typed-value? identifier
                 lambda-args (lambda-body | <'=>'> assign-val)
import         = 'import' string ('as' identifier)? ';'?
class          = 'abstract'? 'class' identifier ('extends' identifier)? '{'
                    (method | field-decl | construct-decl)*
                 '}'
construct-decl = 'const'? identifier ('.' identifier)?  
                 '(' ( typed-arg? (<','> typed-arg)*)? <','>? args-bloc? ')'
                 (':' 'super' params)? ';'
args-bloc      = '{' #'[^{}]*' '}' 
field-decl     = field-type ('=' expr)? ';'

<end>          = <(';'|#'\n'+|','|#'$')>
<statement>    = if
return         = <'return'> expr? <';'>

if             = <'if'> if-condition if-else-body
<if-else-body> =  (lambda-body | return | expr <end>) 
                  ( (<'else'> | <'else if'> if-condition) if-else-body)*   
<if-condition> = <'('> expr <')'> 

lambda-args    = <'('> typed-arg? (<','> typed-arg)* <')'> <'async'?>  
<typed-arg>    = <typed-value?> identifier  
lambda-body    = <'{'> code <'}'>

<expr>         = lambda-val <'!'>?

<lambda-val>   = cascade-val | lambda 
lambda         = lambda-args lambda-body | lambda-args <'=>'> assign-val
<cascade-val>  = assign-val | cascade
cascade        = cascade-val <'..'> assign-val
<assign-val>   = ternary-val | _assign
_assign        = (dot-val | field-type) <_operator> ternary-val 
<ternary-val>  = ifnull-val | ternary
ternary        = ternary-val <'?'> expr <':'> expr
<ifnull-val>   = and-val | ifnull
ifnull         = ifnull-val '??' and-val
<and-val>      = or-val | and
and            = and-val <'&&'> or-val
<or-val>       = equality-val | or
or             = or-val <'||'> equality-val
<equality-val> = compare-val | equality
equality       = equality-val ( '==' | '!=' ) compare-val
<compare-val>  = add-sub-val | compare 
compare        = compare-val ( '<' | '>' | '<=' | '>=' | 'is' | 'as') add-sub-val 
<add-sub-val>  = mul-div-val | add | sub
add            = add-sub-val <'+'> mul-div-val
sub            = add-sub-val <'-'> mul-div-val
<mul-div-val>  = dot-val | mul | div
mul            = mul-div-val <'*'> dot-val
div            = mul-div-val ('/' | '%' | '~/') dot-val
<dot-val>      = term | dot | dot-op
dot-op         = dot-val <'?'> (invoke | field)
dot            = dot-val (invoke | field)
<term>         = value | <'('> ternary-val <')'>

<value>        = (number | string | !get identifier
               | constructor | invoke | typecasting | const  
               | list | map | get | _spread
               | inc | _inc | dec | _dec | identifier | number
               | _tilda | neg | not | await) <';'?> 

typecasting    = value 'as' typed-value

invoke         = <'.'> typed-value params  <';'?>
field          = <'.'> identifier <';'?>
await          = <'await'> value
neg            = !number <'-'> value
not            = <'!'> value
dec            = <'--'> value
inc            = <'++'> value
_dec           = value <'--'>
_inc           = value <'++'>
_tilda         = <'~'> value

const          = <'const'> (constructor | get | map | list | dot | dot-op)
constructor    = typed-value params <';'?>
params         = <'('>  <')'>
               | (<'('> argument (<','> argument)* <','?> <')'>)
argument       = expr | (named-arg expr) 
named-arg      = identifier <':'> 

list           = <generic-type?> 
                 <'['> list-el (<','> list-el)* <','?> <']'>
<list-el>      = _spread | expr     
_spread        = '...' value 
map            = <generic-type?> 
                 <'{'> expr <':'> expr
                 (<','> (identifier|string|number) <':'> expr)*  <'}'>
get            = (get | identifier | map | dot | dot-op)
                 <'['> (identifier | string | number | dot | dot-op) <']'>     

_operator      = '=' | '*=' | '/=' | '~/=' | '%=' | '+=' | '<<=' | '>>=' 
               | '>>>=' | '&=' | '^=' | '|=' | '??=' | '-='

<field-type>   = 'static' (modifier) typed-value identifier |
                  (modifier) typed-value identifier |
                  typed-value? identifier
<modifier>     = 'var' | 'const' | 'final'
<generic-type> = '<' typed-value ('.' identifier)*  <'?'>? 
                     (',' typed-value ('.' identifier)* <'?'>?)* '>'
<typed-value>  = identifier <generic-type?> <'?'>? 
string         = #"r?'([^']*)'"
identifier     = !return #'[a-zA-Z_]+[a-zA-Z0-9!_]*' 
number         = #'-?[0-9]*\.?[0-9]+((e|E)(\+|\-)[0-9]+)?'

<digit>        = #'[0-9]'
