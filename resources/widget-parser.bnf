s            = value | statement

invocation   = constructor (<'.'> (constructor|identifier))*
constructor  = <'return'?> 'const'? identifier params <';'?>

params       = <'('>  <')'>
             | (<'('> argument (<','> argument)* <','?> <')'>)
argument     = value | (named-arg value)
named-arg    = identifier <':'> 

list         = 'const'? <('<' identifier '>')?> 
               <'['> value (<','> value)* <','?> <']'>

map          = <'{'> (identifier|string|number) <':'> value
               (<','> (identifier|string|number) <':'> value)*  <'}'>

get          = identifier <'['> (identifier | string | number) <']'>     

<value>      = number | string | !get identifier | lambda | ternary
             | invocation | !invocation constructor 
             | list | !lambda map | or | not | get 

<statement>  = assignment

lambda       = lambda-args <async?> (lambda-body | <'=>'> (value | statement))
lambda-args  = <'('> typed-arg? (<','> typed-arg)* <')'> 
<typed-arg>  = <(identifier)?> identifier  
async        = 'async'
lambda-exp   = value
lambda-body  = <'{'> <nobracket+> lambda-body* <'}'>

assignment   = identifier <'='> value

not          = <'!'> value
or           = identifier <'??'> value
ternary      = identifier <'?'> value <':'> value
string       = #'([\"\'])(?:(?=(\\?))\2.)*?\1'
<identifier> = #'[a-zA-Z_]+[a-zA-Z0-9.?_]*' 
number       = #'-?[0-9]*\.?[0-9]+((e|E)(\+|\-)[0-9]+)?'

<digit>      = #'[0-9]'
nobracket    = #'[^{}]'
