s              = file / code
code           = (expr <end>)*

metadata       = ('@' qualified params? <';'>?)+
file           = import-block? 
                 (<metadata?> 
                   (method | var-declare <';'> | class | _typedef | for-in |
                    _for | _while | _do-while | switch | try | enum | return))*
<method-decl>  = <'static'?> <dtype>? identifier lambda-args 
<method-body>  = (block | <'=>'> assign-val) <';'*>
method         = method-decl method-body

import-block   = (import <';'?>)+ 
<import>       = (import-full | import-as | import-hide | import-show | import-naked)
import-naked   = im-body
import-full    = im-body im-as-part (im-show-part | im-hide-part)  
import-as      = im-body im-as-part
import-show    = im-body im-show-part
import-hide    = im-body im-hide-part
<im-body>      = <'import'> string
<im-as-part>   = (<'deferred'?> <'as'> identifier)
<im-show-part> = <'show'> identifier+
<im-hide-part> = <'hide'> identifier+

class          = <'abstract'? 'class' #'[^{}]*' '{'>
                    (<metadata?>  (method | method-decl <';'> | getter-decl | 
                     var-declare <';'> | <construct-decl> ))*
                 <'}'>
construct-decl = <metadata?> 'const'? identifier ('.' identifier)?  
                 '(' ( 
                       (typed-arg '.')* typed-arg? 
                       (<','> (typed-arg '.')* typed-arg)*
                     )?
                     <','>? args-bloc? 
                  ')'
                 ( (':' 'super' params)? ';' | ':' (identifier '=' expr (','|';'))* )
args-bloc      = '{' #'[^{}]*' '}' 
_typedef       = 'typedef' dtype <'='> (dtype | method) 
getter-decl    = <dtype?> 'get'
                 identifier (block | <'=>'> assign-val | <';'>) <';'*>

enum           = <'enum'> identifier  
                 <'{'> enum-entry (<','> enum-entry)* <','>? <'}'>
enum-entry     = <metadata> identifier

<end>          = <(';'|#'\n'+|','|#'$')>
<statement>    = var-declare | _for | for-in | _while | _do-while | switch | try
return         = <'return'> expr? <';'>

if             = <'if'> if-condition if-else-body
<if-else-body> =  (block | return | expr <end>) 
                  ( (<'else'> | <'else if'> if-condition) if-else-body)*   
<if-condition> = <'('> expr <')'> 

var-declare    = <'static'>? field-type var-init (<','> var-init)*
var-init       = identifier (<'='> expr)?

for-in         = <'for'> <'('> <dtype?> identifier <'in'> expr <')'> for-body  
_for           = <'for'> <'('> for-init expr? <';'> expr-list? <')'> for-body 
for-init       = var-declare <';'> EPSILON | expr? <';'>
<for-body>     = (block | return | expr <end> | statement)
_while         = <'while'> <'('> expr <')'> for-body 
_do-while      = <'do'> for-body 'while' <'('> expr <')'> <';'> 

switch         = <'switch'> <'('> expr <')'> <'{'> switch-case* default-case? <'}'>
switch-case    = (identifier <':'>)* cases for-body switch-exit?
cases          = (<'case'> expr <':'>)+
default-case   = (identifier <':'>)* <'default'> <':'> for-body switch-exit? 
switch-exit    = ('break' | 'continue' | 'continue' identifier) <';'>

try            = <'try'> block (try-on+ finally? | finally)
try-on         = on-part catch block  
on-part        = <'on'> dtype | EPSILON
catch          = <'catch'> <'('> identifier (<','> identifier)? <')'> | EPSILON
finally        = <'finally'> block

lambda-args    = <'('> typed-arg? (<','>  typed-arg)* <')'> <'async'?>  
<typed-arg>    = <dtype?> identifier  
block          = <'{'> ( statement <';'> | expr <end> | method )* return? <'}'>

expr-list      = expr (',' expr)*
<expr>         = lambda-val <'!'>?

<lambda-val>   = cascade-val | lambda 
lambda         = lambda-args block | lambda-args <'=>'> assign-val
<cascade-val>  = assign-val | cascade
cascade        = cascade-val <'..'> assign-val
<assign-val>   = ternary-val | _set
_set           = dot-val <_operator> ternary-val 
<ternary-val>  = ifnull-val | ternary
ternary        = ternary-val <'?'> expr <':'> expr
<ifnull-val>   = and-val | ifnull
ifnull         = ifnull-val '??' and-val
<and-val>      = or-val | and
and            = and-val <'&&'> or-val
<or-val>       = equality-val | or
or             = or-val <'||'> equality-val
<equality-val> = compare-val | equality
equality       = equality-val ( '==' | '!=' ) compare-val
<compare-val>  = add-sub-val | compare 
compare        = compare-val !type-args ( '<' | '>' | '<=' | '>=' | 'is') add-sub-val 
<add-sub-val>  = mul-div-val | add | sub
add            = add-sub-val <'+'> mul-div-val
sub            = add-sub-val <'-'> mul-div-val
<mul-div-val>  = dot-val | mul | div
mul            = mul-div-val <'*'> dot-val
div            = mul-div-val ('/' | '%' | '~/') dot-val
<dot-val>      = term | dot | dot-op
dot-op         = dot-val <'?'> (invoke | field)
dot            = dot-val (invoke | field)
<term>         = value | <'('> ternary-val <')'>

<value>        = (number | string | !get identifier
               | constructor | invoke | typecasting | const  
               | list | map | get | _spread | if
               | inc | _inc | dec | _dec | identifier | number
               | _tilda | neg | not | await) <';'?> 

typecasting    = value 'as' dtype

invoke         = <'.'> typed-value params  <';'?>
field          = <'.'> identifier <';'?>
await          = <'await'> (value)
neg            = !number <'-'> value
not            = <'!'> value
dec            = <'--'> value
inc            = <'++'> value
_dec           = value <'--'>
_inc           = value <'++'>
_tilda         = <'~'> value

const          = <'const'> (constructor | get | map | list | dot | dot-op)
constructor    = typed-value params <';'?>
<typed-value>  = identifier <type-args?> 
params         = <'('>  <')'>
               | (<'('> argument (<','> argument)* <','?> <')'>)
argument       = expr | (named-arg expr) 
named-arg      = identifier <':'> 

list           = <type-args?> 
                 <'['> (list-el (<','> list-el)* <','?> | EPSILON ) <']'>
<list-el>      = _spread | expr     
_spread        = '...' value 
map            = <type-args?> 
                 <'{'> (expr <':'> expr
                        (<','> (identifier|string|number) <':'> expr)* <','>? 
                        | EPSILON ) <'}'>
get            = (get | identifier | map | dot | dot-op)
                 <'['> (identifier | string | number | dot | dot-op) <']'>     

_operator      = '=' | '*=' | '/=' | '~/=' | '%=' | '+=' | '<<=' | '>>=' 
               | '>>>=' | '&=' | '^=' | '|=' | '??=' | '-='

(* type without name *)
<field-type>   = !'await' (modifier <dtype> | !modifier <dtype> | modifier)
<modifier>     = 'final' | 'const'
<dtype>        = qualified type-args? <'?'?> 
qualified      = (identifier <'.'>)* identifier
type-args      = <'<'> type-list <'>'>
type-list      = dtype (',' dtype)*

string         = #'r?\'([^\']*)\''
identifier     = !return #'[a-zA-Z_]+[a-zA-Z0-9!_]*' 
number         = #'-?[0-9]*\.?[0-9]+((e|E)(\+|\-)[0-9]+)?'

<digit>        = #'[0-9]'
