s              = (statement | expr) ((<';'>|<#'\n'+>) s)* <','?>

<value>        = (number | string | !get identifier
               | constructor | invoke 
               | list | map | get | typed-value
               | inc | _inc | dec | _dec | identifier | number
               | _tilda | neg | not | await) <';'?> 

typed-value    = value 'as' identifier type?

<statement>    = if | return
return         = <'return'> expr;

constructor    = 'const'? identifier <type?> params <';'?>
params         = <'('>  <')'>
               | (<'('> argument (<','> argument)* <','?> <')'>)
argument       = expr | (named-arg expr) 
named-arg      = identifier <':'> 

list           = 'const'? <type?> 
                 <'['> list-el (<','> list-el)* <','?> <']'>
<list-el>      = spread | expr     
spread         = '...' value 
map            = 'const'? <type?> 
                 <'{'> (identifier|string|number) <':'> expr
                 (<','> (identifier|string|number) <':'> expr)*  <'}'>
get            = (get | identifier) <'['> (identifier | string | number) <']'>     

if             = <'if'> if-condition if-else-body
<if-else-body> =  (lambda-body | s ) 
                  ( (<'else'> | <'else if'> if-condition) if-else-body)*   
<if-condition> = <'('> expr <')'> 

lambda-args    = <'('> typed-arg? (<','> typed-arg)* <')'> <'async'?>  
<typed-arg>    = <(identifier <type?>)?> identifier  
lambda-body    = <'{'> s <'}'>

<expr>         = lambda-val

<lambda-val>   = assign-val | lambda 
lambda         = lambda-args lambda-body | lambda-args <'=>'> assign-val
<assign-val>   = ternary-val | _assign
_assign        = (dot-val | 
                  ('const'|'final')? (identifier type?)? identifier) 
                 <_operator> ternary-val 
<ternary-val>  = ifnull-val | ternary
ternary        = ternary-val <'?'> expr <':'> expr
<ifnull-val>   = and-val | ifnull
ifnull         = ifnull-val '??' and-val
<and-val>      = or-val | and
and            = and-val '&&' or-val
<or-val>       = equality-val | or
or             = or-val '||' equality-val
<equality-val> = compare-val | equality
equality       = equality-val ( '==' | '!=' ) compare-val
<compare-val>  = add-val | compare 
compare        = compare-val ( '<' | '>' | '<=' | '>=' | 'is' | 'as') add-val 
<add-val>      = mul-val | add
add            = add-val ('+' | '-') mul-val
<mul-val>      = dot-val | mul
mul            = mul-val ('*' | '/' | '%' | '~/') dot-val
<dot-val>      = term | dot | dot-op
dot-op         = dot-val <'?'> (invoke | field)
dot            = dot-val (invoke | field)
<term>         = value | <'('> ternary-val <')'>

invoke         = <'.'> identifier <type?> params  <';'?>
field          = <'.'> identifier <';'?>
await          = <'await'> value
neg            = !number <'-'> value
not            = <'!'> value
dec            = <'--'> value
inc            = <'++'> value
_dec           = value <'--'>
_inc           = value <'++'>
_tilda         = <'~'> value

_assignment    = identifier _operator value
_operator      = '=' | '*=' | '/=' | '~/=' | '%=' | '+=' | '<<=' | '>>=' 
               | '>>>=' | '&=' | '^=' | '|=' | '??='
priority       = <'('> value <')'> 

<type>         = '<' (identifier type?) (',' (identifier type?))* '>'
string         = #"'([^']*)'"
<identifier>   = #'[a-zA-Z_]+[a-zA-Z0-9!_]*' 
number         = #'-?[0-9]*\.?[0-9]+((e|E)(\+|\-)[0-9]+)?'

<digit>        = #'[0-9]'
